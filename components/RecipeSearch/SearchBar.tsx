/**
 * This code was generated by Builder.io.
 */
import React, { useState, useEffect } from "react";
import ingredientsData from "../../app/data/ingredients.json"; // Adjust the path as needed

interface Ingredient {
  name: string;
  id: string;
}

interface SearchBarProps {
  onAddIngredient: (ingredient: Ingredient) => void;
}

const SearchBar: React.FC<SearchBarProps> = ({ onAddIngredient }) => {
  const [searchTerm, setSearchTerm] = useState("");
  const [searchResults, setSearchResults] = useState<Ingredient[]>([]);
  const [ingredients, setIngredients] = useState<Ingredient[]>([]);
  
  useEffect(() => {
    // Load ingredients.json directly
    const ingredientsArray = Object.keys(ingredientsData).map((key) => ({
      name: key,
      id: ingredientsData[key as keyof typeof ingredientsData],
    }));
    setIngredients(ingredientsArray);
  }, []);

  const handleSearch = (event: React.ChangeEvent<HTMLInputElement>) => {
    const term = event.target.value;
    setSearchTerm(term);
    if (term) {
      const results = ingredients.filter((ingredient) =>
        ingredient.name.toLowerCase().includes(term.toLowerCase())
      );
      setSearchResults(results);
    } else {
      setSearchResults([]);
    }
  };

  const handleAddIngredient = (ingredient: Ingredient) => {
    onAddIngredient(ingredient);
    setSearchTerm("");
    setSearchResults([]);
  };

  return (
    <div className="relative">
      <form className="flex overflow-hidden justify-center items-center px-4 text-sm font-medium text-center whitespace-nowrap rounded-xl bg-stone-200 max-w-[480px] min-h-[32px] min-w-[84px] text-stone-900 w-[84px]">
        <label htmlFor="searchInput" className="sr-only">
          Search
        </label>
        <input
          type="search"
          id="searchInput"
          className="overflow-hidden self-stretch my-auto w-[50px] bg-transparent border-none focus:outline-none"
          placeholder="Search"
          aria-label="Search"
          value={searchTerm}
          onChange={handleSearch}
        />
      </form>
      {searchResults.length > 0 && (
        <ul className="absolute bg-white border border-gray-300 w-full mt-1">
          {searchResults.map((ingredient, index) => (
            <li
              key={index}
              className="p-2 cursor-pointer hover:bg-gray-200"
              onClick={() => handleAddIngredient(ingredient)}
            >
              {ingredient.name}
            </li>
          ))}
        </ul>
      )}
    </div>
  );
};

export default SearchBar;
